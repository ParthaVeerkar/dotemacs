# contributor: Prajwalit <contact@prajwalit.com>
# name: YUI widget
# --

/**
 * This method (just) registers the module so that it can attached to a YUI instance
 * via the use method. It's executed at YUI().use(...) phase.
 */
YUI.add("$1-${2:moduleName}", function(Y) {

  /**
   * @class Y.${3:namespace}
   * @example -
   *
   *
   */
  Y.$3 = Y.Base.create ("$2", Y.Widget, [], {

    /**
     * BOUNDING_TEMPLATE is the outer wrapper of the widget.
     */
    BOUNDING_TEMPLATE: "<div></div>",
    
    /**
     * CONTENT_TEMPLATE is the inner wrapper of the widget.
     */
    CONTENT_TEMPLATE: "<div></div>",
    
    /**
     * Constructor for $3.
     */
    initializer: function (config) {
      Y.log ("Initializing $2");
      $0
    },
    
    /**
     * Destructor for $3.
     */
    destructor: function () {

    },

    /**
     * Renderer function for $3.
     * This function gets called when render() function gets executed.
     */
    renderer: function () {
      this.renderUI ();
      this.bindUI ();
      this.syncUI ();
    },

    /**
     * RenderUI function for $3.
     * This method is responsible for creating and adding the nodes which
     * the widget needs into the document.
     */
    renderUI: function () {

    },

    /**
     * BindUI function for $3.
     * This method is responsible for attaching event listeners which bind the UI
     * to the widget state. 
     */
    bindUI: function () {

    },

    /**
     * SyncUI function for $3.
     * This method is responsible for setting the initial state of the UI based on
     * the current state of the widget at the time of rendering.
     */
    syncUI: function () {

    }
    
  }, {

    /**
     * Config attributes for $3 go here.
     */
    ATTRS: {
      
    }
  });

}, "0.0.1", {requires: ["widget", "base-build"$4]});
